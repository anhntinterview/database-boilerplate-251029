# orchestrator (import sub workflows)
name: Main.Execute

on:
    workflow_dispatch:
        inputs:
            major:
                description: "Major version"
                default: "0"
                required: true
                type: string
            minor:
                description: "Minor version"
                default: "0"
                required: true
                type: string
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions:
    contents: read
    actions: write
    id-token: write

jobs:
    # ========================
    # Lint Validate
    # ========================
    lint-actions:
        name: Validate.Lint.Actions
        if: ${{ github.event_name == 'pull_request' }}
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/_Validate.Lint.Actions.yaml@ci/setup-workflows

    lint-pr:
        name: Validate.Lint.PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/_Validate.Lint.PR.yaml@ci/setup-workflows

    # ========================
    # 1️⃣ BACKUP DATABASE FIRST
    # ========================
    backup:
        name: Backup Databases
        needs: [lint-pr, lint-actions]
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Backup.DB.yaml@ci/setup-workflows
        with:
            backup_dir: "/var/backups"
            mongo_enabled: true
            postgres_enabled: true
        secrets:
            SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
            SERVER_HOST: ${{ secrets.SERVER_HOST }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

    # ========================
    # 2️⃣ DEPLOY CONTAINERS
    # ========================
    deploy:
        name: Deploy Containers
        needs: backup
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Deploy.DB.yaml@ci/setup-workflows
        if: ${{ needs.backup.outputs.db_status == 'backup-successful' || needs.backup.outputs.db_status == 'database-not-installed' }}
        secrets:
            SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
            SERVER_HOST: ${{ secrets.SERVER_HOST }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_APP_DIR: ${{ secrets.SERVER_APP_DIR }}
            SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
            SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
            SSH_PORT: ${{ secrets.SSH_PORT }}

    # ========================
    # 3️⃣ SETUP NGINX PROXY
    # ========================
    nginx:
        name: Setup NGINX Reverse Proxy
        if: success()
        needs: deploy
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Setup.Nginx.Proxy.yaml@ci/setup-workflows
        secrets:
            SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
            SERVER_HOST: ${{ secrets.SERVER_HOST }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_APP_DIR: ${{ secrets.SERVER_APP_DIR }}
            SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
            SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
            SSH_PORT: ${{ secrets.SSH_PORT }}
            MONGO_PORT: ${{ secrets.MONGO_PORT }}
            POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
            DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

    # ========================
    # 4️⃣ VERSION TAG
    # ========================
    tag-version:
        name: Determine Next Version
        runs-on: ubuntu-latest
        needs: deploy
        outputs:
            major: ${{ steps.version.outputs.major }}
            minor: ${{ steps.version.outputs.minor }}
            next_patch: ${{ steps.version.outputs.next_patch }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Determine next patch version
              id: version
              run: |
                  LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                  MAJOR=$(echo "$LATEST" | cut -d. -f1 | tr -d 'v')
                  MINOR=$(echo "$LATEST" | cut -d. -f2)
                  PATCH=$(echo "$LATEST" | cut -d. -f3)
                  NEXT=$((PATCH + 1))
                  echo "major=$MAJOR" >> "$GITHUB_OUTPUT"
                  echo "minor=$MINOR" >> "$GITHUB_OUTPUT"
                  echo "next_patch=$NEXT" >> "$GITHUB_OUTPUT"

    tag:
        name: Create GitHub Tag
        needs: [deploy, tag-version]
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Create.GitHub.Tag.yaml@ci/setup-workflows
        with:
            major: ${{ needs.tag-version.outputs.major }}
            minor: ${{ needs.tag-version.outputs.minor }}
            patch: ${{ needs.tag-version.outputs.next_patch }}

    # ========================
    # 5️⃣ ROLLBACK ON FAILURE
    # ========================
    rollback:
        name: Rollback if Deploy Fails
        needs: [deploy]
        if: failure()
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Rollback.DB.yaml@ci/setup-workflows
