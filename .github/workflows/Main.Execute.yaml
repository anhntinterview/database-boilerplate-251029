# orchestrator (import sub workflows)
name: Main.Execute

on:
    workflow_dispatch:
        inputs:
            major:
                description: "Major version"
                default: "0"
                required: true
                type: string
            minor:
                description: "Minor version"
                default: "0"
                required: true
                type: string
    push:
        branches:
            - main

permissions:
    contents: read
    actions: write
    id-token: write

jobs:
    # ========================
    # Lint Validate
    # ========================
    lint-actions:
        name: Validate.Lint.Actions
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/_Validate.Lint.Actions.yaml@ci/setup-workflows

    lint-pr:
        name: Validate.Lint.PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/_Validate.Lint.PR.yaml@ci/setup-workflows

    # ========================
    # 1Ô∏è‚É£ BACKUP DATABASE FIRST
    # ========================
    backup:
        name: Backup Databases
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Backup.Database.yaml@ci/setup-workflows
        with:
            backup_dir: "/var/backups"
            mongo_enabled: true
            postgres_enabled: true

    # ========================
    # 2Ô∏è‚É£ DEPLOY CONTAINERS
    # ========================
    deploy:
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Deploy.Server.yaml@ci/setup-workflows
        needs: backup
        secrets: inherit

    # ========================
    # 3Ô∏è‚É£ SETUP NGINX PROXY
    # ========================
    nginx:
        name: Setup NGINX Reverse Proxy
        runs-on: ubuntu-latest
        needs: [deploy]
        if: success()
        steps:
            - name: Trigger NGINX proxy setup
              uses: peter-evans/repository-dispatch@v3
              with:
                  token: ${{ secrets.REPO_DISPATCH_TOKEN }}
                  repository: ${{ github.repository }}
                  event-type: setup-nginx

    # ========================
    # 4Ô∏è‚É£ VERSION TAG
    # ========================
    tag-version:
        name: Determine Next Version
        runs-on: ubuntu-latest
        needs: [deploy]
        outputs:
            next_patch: ${{ steps.version.outputs.next_patch }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Determine next patch version
              id: version
              run: |
                  LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                  PATCH=$(echo "$LATEST" | cut -d. -f3)
                  NEXT=$((PATCH + 1))
                  echo "next_patch=$NEXT" >> "$GITHUB_OUTPUT"
                  echo "üì¶ Latest tag: $LATEST"
                  echo "‚û°Ô∏è Next patch version: $NEXT"

    tag:
        name: Create GitHub Tag
        needs: [deploy, tag-version]
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Create.GitHub.Tag.yaml@ci/setup-workflows
        with:
            major: ${{ inputs.major }}
            minor: ${{ inputs.minor }}
            patch: ${{ needs.tag-version.outputs.next_patch }}

    # ========================
    # 5Ô∏è‚É£ ROLLBACK ON FAILURE
    # ========================
    rollback:
        name: Rollback if Deploy Fails
        needs: [deploy]
        if: failure()
        uses: anhntinterview/database-boilerplate-251029/.github/workflows/Rollback.Application.yaml@ci/setup-workflows
