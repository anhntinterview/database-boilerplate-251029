name: Setup.NGINX.Proxy

on:
  workflow_call:
    secrets:
      SERVER_SSH_KEY:
        required: true
      SERVER_HOST:
        required: true
      SERVER_USER:
        required: true
      DOMAIN_NAME:
        required: true
      SERVER_APP_DIR:
        required: true
      SERVER_SSH_PORT:
        required: true
      SERVER_PASSWORD:
        required: true
      SSH_PORT:
        required: true
      MONGO_PORT:
        required: true
      POSTGRES_PORT:
        required: true

jobs:
  setup-database-nginx:
    name: Configure Database Reverse Proxy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Configure Nginx Reverse Proxy for Databases
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MONGO_PORT: ${{ secrets.MONGO_PORT }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        run: |
          echo "‚öôÔ∏è Setting up Nginx proxy for MongoDB and PostgreSQL..."

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash -s -- "$SERVER_PASSWORD" "$DOMAIN_NAME" "$MONGO_PORT" "$POSTGRES_PORT" <<'EOF'
          set -e
          SERVER_PASSWORD="$1"
          DOMAIN="$2"
          MONGO_PORT="$3"
          POSTGRES_PORT="$4"

          NGINX_CONF="/etc/nginx/streams-enabled/${DOMAIN}.conf"

          echo "üîç Checking Nginx installation..."
          if ! command -v nginx &>/dev/null; then
            echo "üì¶ Installing Nginx..."
            echo "$SERVER_PASSWORD" | sudo -S apt update -y
            echo "$SERVER_PASSWORD" | sudo -S apt install nginx -y
            echo "$SERVER_PASSWORD" | sudo -S systemctl enable nginx
            echo "$SERVER_PASSWORD" | sudo -S systemctl start nginx
          fi
          echo "‚úÖ Nginx ready."

          echo "üîç Checking Certbot installation..."
          if ! command -v certbot &>/dev/null; then
            echo "üì¶ Installing Certbot..."
            echo "$SERVER_PASSWORD" | sudo -S apt install -y certbot python3-certbot-nginx
          fi
          echo "‚úÖ Certbot ready."

          # -----------------------------------------------------
          # 1. HTTP config for Certbot validation
          # -----------------------------------------------------
          echo "üß± Creating temporary HTTP-only config for \$DOMAIN ..."
          cat <<CONFIG > temp.conf
          # Stream TCP proxy for PostgreSQL & MongoDB no SSL

          # --- PostgreSQL Proxy ---
          upstream postgres_backend {
              server 127.0.0.1:5432;  # original PostgreSQL port
          }

          server {
              listen 15432;

              # Proxy TCP
              proxy_pass postgres_backend;

              # Timeout
              proxy_timeout 10m;
              proxy_connect_timeout 10s;
          }

          # --- MongoDB Proxy ---
          upstream mongo_backend {
              server 127.0.0.1:27017;  # original MongoDB port
          }

          server {
              listen 27018;

              # Proxy TCP
              proxy_pass mongo_backend;

              # Timeout
              proxy_timeout 10m;
              proxy_connect_timeout 10s;
          }
          CONFIG

          echo "$SERVER_PASSWORD" | sudo -S mv temp.conf "$NGINX_CONF"

          echo "$SERVER_PASSWORD" | sudo -S nginx -t
          echo "$SERVER_PASSWORD" | sudo -S systemctl reload nginx
          echo "‚úÖ HTTP config loaded."

          echo "‚úÖ Database reverse proxy configured successfully for $DOMAIN"
          echo "üåê Mongo: https://$DOMAIN/mongo/"
          echo "üåê Postgres: https://$DOMAIN/postgres/"
          EOF

      - name: Verify Nginx
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "üîé Checking Nginx service status..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash -s -- "$SERVER_PASSWORD" << 'EOF'
            set -e
            SERVER_PASSWORD="$1"
            if ! echo "$SERVER_PASSWORD" | sudo -S systemctl is-active --quiet nginx; then
              echo "‚ùå Nginx service not active!"
              exit 1
            fi
            echo "‚úÖ Nginx service is active and running."
          EOF
